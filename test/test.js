// Generated by CoffeeScript 2.6.1
(function() {
  var i, j, jref, json, k, l, len, len1, len2, len3, len4, len5, len6, m, n, o, p, util;

  jref = require('../');

  json = [];

  json.push({
    foo: {
      id: 'foobar',
      value: 'bar'
    },
    example: {
      '$ref': 'foobar'
    }
  });

  json.push({
    foo: {
      id: 'foobar',
      value: 'bar',
      foo: 'flop'
    },
    example: {
      '$ref': 'foobar'
    }
  });

  json.push({
    foo: {
      id: 'foobar',
      value: 'bar',
      foo: 'flop'
    },
    example: {
      ids: [
        {
          '$ref': 'foobar'
        },
        {
          '$ref': 'foobar'
        }
      ]
    }
  });

  json.push({
    foo: {
      value: 'bar',
      foo: 'flop'
    },
    example: {
      ids: [
        {
          '$ref': '#/foo/value'
        },
        {
          '$ref': '#/foo/foo'
        }
      ]
    }
  });

  json.push({
    foo: {
      value: 'bar',
      foo: 'flop'
    },
    example: {
      ids: {
        '$ref': '#/foo/value/this/does/not/resolve'
      }
    }
  });

  json.push({
    foo: {
      "$ref": "./test.json"
    }
  });

  json.push({
    foo: {
      "$ref": "/this/does/not/exist/test.json"
    }
  });

  json.push({
    foo: {
      "$ref": "http://json-schema.org/address"
    }
  });

  json.push({
    foo: {
      "$ref": "http://json-schema.org/address"
    }
  });

  json.push({
    foo: {
      "$ref": "http://json-schema.org/address#/properties/region"
    }
  });

  json.push({
    bar: ["one", "two"],
    foo: {
      "$ref": "#/bar[1]"
    }
  });

  json.push({
    bar: ["one", "two"],
    length: {
      "$ref": "#/bar.length"
    }
  });

  json.push({
    flop: function() {
      return "hello world";
    },
    foo: {
      "$ref": "#/flop()"
    }
  });

  for (i = 0, len = json.length; i < len; i++) {
    j = json[i];
    console.log(JSON.stringify(j, null, 2));
    console.log(JSON.stringify(jref.resolve(j), null, 2));
  }

  jref.reftoken = '@ref';

  jref.pathtoken = '@';

  json = [];

  json.push({
    flop: function() {
      return "hello at world";
    },
    foo: [
      {
        "@ref": "@/flop()"
      }
    ]
  });

  for (k = 0, len1 = json.length; k < len1; k++) {
    j = json[k];
    console.log(JSON.stringify(j, null, 2));
    console.log(JSON.stringify(jref.resolve(j), null, 2));
  }

  json = [];

  jref.debug = false;

  json.push({
    flo: {
      fla: "hello at world"
    },
    one: {
      "@ref": [
        {
          "@ref": "@flo/fla"
        }
      ],
      two: {
        "@ref": [
          {
            "@ref": "@/flo/fla"
          }
        ]
      }
    }
  });

  for (l = 0, len2 = json.length; l < len2; l++) {
    j = json[l];
    console.log(JSON.stringify(j, null, 2));
    console.log("expecting next line to be error:");
    console.log(JSON.stringify(jref.resolve(j), null, 2));
  }

  if (typeof window === "undefined" || window === null) {
    util = require('util');
    jref.reftoken = '$ref';
    jref.pathtoken = '#';
    json = [];
    json.push({
      a: {
        a: true
      },
      b: {
        b: true
      },
      "$ref": [
        {
          "$ref": "#/a"
        },
        {
          "$ref": "#/b"
        }
      ]
    });
//json.push                             # this works but fails when printing out (because circular)
//  node_A:
//    edges: [{"$ref": "#/node_B"}]
//  node_B:
//    edges: [{"$ref": "#/node_A"}]
//  node_C:
//    edges: [{"$ref": "#/node_B"}]
    for (m = 0, len3 = json.length; m < len3; m++) {
      j = json[m];
      console.log(JSON.stringify(j, null, 2));
      console.log(util.inspect(jref.resolve(j), {
        showHidden: false,
        depth: 5
      }));
    }
    json = [];
    json.push({
      a: {
        "$ref": [
          {
            "$ref": "#/b"
          }
        ]
      },
      b: {
        "$ref": [
          {
            "$ref": "#/a"
          }
        ]
      }
    });
    for (n = 0, len4 = json.length; n < len4; n++) {
      j = json[n];
      console.log(JSON.stringify(j, null, 2));
      console.log(util.inspect(jref.resolve(j), {
        showHidden: false,
        depth: 5
      }));
    }
    json = [];
    json.push({
      a: {
        "$ref": "#/sdfb"
      }
    });
    for (o = 0, len5 = json.length; o < len5; o++) {
      j = json[o];
      console.log(JSON.stringify(j, null, 2));
      console.log(util.inspect(jref.resolve(j), {
        showHidden: false,
        depth: 5
      }));
    }
    json = [];
    json.push({
      a: {
        "$ref": {
          "foo": "bar"
        }
      }
    });
    for (p = 0, len6 = json.length; p < len6; p++) {
      j = json[p];
      console.log(JSON.stringify(j, null, 2));
      console.log(util.inspect(jref.resolve(j), {
        showHidden: false,
        depth: 5
      }));
    }
    json = {
      a: {
        foo: {
          bar: {
            title: "foo"
          }
        }
      },
      "$extend": {
        "$ref": "#a.foo.bar",
        location: "skyscraper",
        sex: "male"
      }
    };
    console.log(JSON.stringify(json, null, 2));
    jref.extend(json);
    console.log(JSON.stringify(json, null, 2));
  }

}).call(this);
